charToRaw("ø")
# Hvilke variable typer man har fået ind
str(hwg)
wq <- read.csv("Data/wq.csv", sep =";")
View(hwg)
View(hwg)
#Statistikken på det
summary(hwg)
#Lav en ny kolonne
head(hwg)
hwg$BMI <- hwg$Weight/(hwg$Height/100)^2
View(hwg)
# hwg subset
hwgSub <- hwg[1:10, ]
View(hwgSub)
print(hwg[i,1])
# for Loops.
for(i in 1:nrow(hwgSub)){
print(hwg[i,1])
}
for(i in 1:nrow(hwgSub)){
}
for(i in 1:nrow(hwgSub)){
}
for(i in 1:nrow(hwgSub)){
print(c("element nr.",i,"", hwg[i,3]))
}
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
output <- paste("element nr.",i,"", hwg[i,3])
print(output)
}
baseURL <- "https://www.boligsiden.dk/tilsalg?page="
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
outputURL <- paste0(baseURL,i)
print(outputURL)
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
outputURL <- paste0(baseURL,i)
print(outputURL)
}
for(i in 1:nrow(hwgSub)){
print(c("element nr.",i,"", hwg[i,3]))
outputURL <- paste0(baseURL,i)
print(outputURL)
}
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
outputURL <- paste0(baseURL,i)
print(outputURL)
}
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
outputURL <- paste0(baseURL,i)
print(outputURL)
}
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
output <- paste("element nr.",i,"", hwg[i,3])
print(output)
}
hwgSub$BMI=NA
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
#compute the BMI for each row manually
hwgSub[i,6] <- hwgSub[i, 4/(hwgSub[i,3]/100)^2
}
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
#compute the BMI for each row manually
hwgSub[i,6] <- hwgSub[i,4/(hwgSub[i,3]/100)^2
}
View(hwgSub)
# Ny vektor på hwgSub på 10 elementer
kbh <- 1:10
NewhwgSub <- cbind(hwgSub, kbh)
View(NewhwgSub)
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
#compute the BMI for each row manually
hwgSub[i,6] <- hwgSub[i,4/(hwgSub[i,3]/100)^2
}
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
#compute the BMI for each row manually
hwgSub[i,6] <- hwgSub[i,4]/(hwgSub[i,3]/100)^2
}
View(hwgSub)
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
output <- paste("element nr.",i,"", hwg[i,3])
print(output)
}
hwgSub$BMI=NA
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
#compute the BMI for each row manually
hwgSub[i,6] <- hwgSub[i,4]/(hwgSub[i,3]/100)^2
}
# Ny vektor på hwgSub på 10 elementer
kbh <- 1:10
NewhwgSub <- cbind(hwgSub, kbh)
# Rename kbh kolonne. Lav en normalfordelt vektor med 10 datapunkter
colnames(NewhwgSub) <- names1
# Ny vektor på hwgSub på 10 elementer
kbh <- 1:10
NewhwgSub <- cbind(hwgSub, kbh)
# Rename kbh kolonne. Lav en normalfordelt vektor med 10 datapunkter
colnames(NewhwgSub) <- names1
NewhwgSub <- cbind(hwgSub, kbh)
names1 <- c("X", "Køn", "Højde", "Vægt", "Indeks", "BMI")
colnames(NewhwgSub) <- names1
colnames(NewhwgSub)[1] <- Kurt
colnames(NewhwgSub)[1] <- "Kurt"
# Ny øvelse
library(ISLR2)
df <- Boston
summary(df)
#Histogram på H. Fundet ved at skrive Summary(df) i konsolen.
hist(df$age)
# ifelse siger hvis der er sandt, gør du det her. Hvis det ikke er sandt, gør du det her
df$agebind <- ifelse(df$age>60,1,0)
View(df)
# Function skal bruges til at der kommer tal ind, og spytte en kategori ud
give_age_cat <- function(house_age){
ret_val <- ""
if(house_age<2) {
ret_val <- "Brand new"
}else if (house_age<5){
ret_val <- "New"
}else if(house_age<10){
ret_val <- "Normal"
}else {
ret_val <- "Old"
}
return(ret_val)
}
give_age_cat()
give_age_cat(30)
give_age_cat(30)
# Function skal bruges til at der kommer tal ind, og spytte en kategori ud
df$Age_cat <- sapply (df$age, FUN = give_age_cat)
is.na(hwg$Gender)
sum(is.na(hwg$Gender))
hwg$Gender <- sapply (hwg$Gender, function(x) gsub("l", "x", x))
alle <- dst_get_tables()
library(dkstat)
alle <- dst_get_tables()
View(alle)
forv1 <- dst_meta("FORV1")
View(forv1)
forv1$variables
forv1$values$INDIKATOR$text
alle <- dst_get_tables()
forv1 <- dst_meta("FORV1")
forv1_filter <- list(INDIKATOR = "*",
Tid = "*")
forv1_data <- dst_get_tables("FORV1", query = forv1_filter)
Forv1_data <- dst_get_tables("FORV1", query = forv1_filter)
Forv1_data <- dst_get_data("FORV1",query = forv1_filter)
Forv1_data <- t(Forv1_data)
forv_sub <- Forv1_data[Forv1_data$TID="2000-01-01",]
# for Loops.
for(i in 1:nrow(hwgSub)){
print(hwg[i,1])
}
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
outputURL <- paste0(baseURL,i)
print(outputURL)
}
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
output <- paste("element nr.",i,"", hwg[i,3])
print(output)
}
hwgSub$BMI=NA
for(i in 1:nrow(hwgSub)){
#print(c("element nr.",i,"", hwg[i,3]))
#compute the BMI for each row manually
# TIP: Debug: i = 1
hwgSub[i,6] <- hwgSub[i,4]/(hwgSub[i,3]/100)^2
}
# Ny vektor på hwgSub på 10 elementer
kbh <- 1:10
NewhwgSub <- cbind(hwgSub, kbh)
# Rename kbh kolonne. Lav en normalfordelt vektor med 10 datapunkter
# Renaming af enkelt kolonne
names1 <- c("X", "Køn", "Højde", "Vægt", "Indeks", "BMI")
colnames(NewhwgSub)[1] <- "Kurt"
# Ny øvelse
library(ISLR2)
df <- Boston
#Coberiance + correlation
rnorm(6)
hist(rnorm_100, breaks = 20)
#Coberiance + correlation
rnorm(6)
hist(rnorm_100, breaks = 20)
#Coberiance + correlation
rnorm(6)
rnorm_100 <- rnorm(100)
hist(rnorm_100, breaks = 20)
col_a <- rnorm(6,5)
col_a <- round(col_a, 0)
col_b <- rnorm(6,5,0.5)
col_b <- round (col_b)
col_c <- rnorm(6,3)
col_d <- rnorm(6,1)
my_matrix <- round(data.frame(col_a,col_b,col_c, col_d))
mean(col_a)
my_mean <- function(v){
sum = 0
for (i in 1:length(v)), {
my_mean <- function(v){
sum = 0
for (i in 1:length(v)) {
sum = sum + v[i]
}
mm <- sum/length(v)
return(mm)
}
mean(col_a)
mean(col_a)
my_mean(col_a)
my_mean <- function(v){
sum = 0
for (i in 1:length(v)) {
sum = sum + v[i]
}
mm <- sum/length(v)
return(mm)
}
my_cov <- function(v,w){
mv <- my_mean(v)
mm_w <- my_mean(w)
sum = 0
for (1 in 1:length(w)) {
my_cov <- function(v,w){
m_v <- my_mean(v)
m_w <- my_mean(w)
sum = 0
for (1 in 1:length(w)) {
my_cov <- function(v,w){
m_v <- my_mean(v)
m_w <- my_mean(w)
sum = 0
for (i in 1:length(w)) {
t_v <- v[i] - m_v,
my_cov <- function(v,w){
m_v <- my_mean(v)
m_w <- my_mean(w)
sum = 0
for (i in 1:length(w)) {
t_v <- v[i]-m_v,
my_cov <- function(v,w){
m_v <- my_mean(v)
m_w <- my_mean(w)
sum = 0
for (i in 1:length(w)) {
t_v <- v[i]-m_v,
my_cov <- function(v,w){
m_v <- my_mean(v)
m_w <- my_mean(w)
sum = 0
for (i in 1:length(w)) {
t_v <- v[i]-m_v
t_w <- w[i]-m_w
t_p <- t_v*t_w
sum <- sum + t_p
}
ret_cov <- sum / (length(w)-1)
return(ret_cov)
}
my_cov(col_a,col_b)
ret_cov <- sum / (length(w)-1)
return(ret_cov)
my_cov <- function(v,w){
m_v <- my_mean(v)
m_w <- my_mean(w)
sum = 0
for (i in 1:length(w)) {
t_v <- v[i]-m_v
t_w <- w[i]-m_w
t_p <- t_v*t_w
sum <- sum + t_p
}
ret_cov <- sum / (length(w)-1)
return(ret_cov)
}
my_cov(col_a,col_b)
#Coberiance + correlation (Kap 3-5)https://efif.sharepoint.com/sites/cph/Lyngby/Shared%20Documents/Forms/AllItems.aspx?id=%2Fsites%2Fcph%2FLyngby%2FShared%20Documents%2F4%2E%20Indhold%20%26%20Niveau%2FDAT%2FDAL%2Fmaterialer%5Fthor%2FDALE23%2Dopgaver%2Epdf&parent=%2Fsites%2Fcph%2FLyngby%2FShared%20Documents%2F4%2E%20Indhold%20%26%20Niveau%2FDAT%2FDAL%2Fmaterialer%5Fthor&p=true&ga=1
rnorm(6)
rnorm_100 <- rnorm(100)
hist(rnorm_100, breaks = 20)
col_a <- rnorm(6,5)
col_a <- round(col_a, 0)
col_b <- rnorm(6,5,0.5)
col_b <- round (col_b)
col_c <- rnorm(6,3)
col_d <- rnorm(6,1)
my_matrix <- round(data.frame(col_a,col_b,col_c, col_d))
mean(col_a)
my_mean(col_a)
my_cov(col_a,col_b)
my_mean <- function(v){
sum = 0
for (i in 1:length(v)) {
sum = sum + v[i]
}
mm <- sum/length(v)
return(mm)
}
my_cov <- function(v,w){
m_v <- my_mean(v)
m_w <- my_mean(w)
sum = 0
for (i in 1:length(w)) {
t_v <- v[i]-m_v
t_w <- w[i]-m_w
t_p <- t_v*t_w
sum <- sum + t_p
}
ret_cov <- sum / (length(w)-1)
return(ret_cov)
}
my_cov(col_a,col_b)
# Correlation
my_sd <- function(v){
sd_1 <- my_mean(v)
sum = 0
for (i in 1:length(v)) {
temp <- (v[i]-sd_1)^2
sum <- sum + temp
}
ret_sd <- sum/(length(v)-1)
ret_sd <- sqrt(ret_sd_op)
return(ret_sd)
}
my_corr <- function(v,w){
# Get coveriance from my function.
my_cov_t <- my_cov(v,w)
my_sd_v <- my_sd(v)
my_sd_w <- my_sd(w)
ret_corr <- my_cov_t/(my_sd_v*my_sd_w)
return(ret_corr)
}
my_corr(col_a,col_b)
my_corr(col_a, col_b)
# Correlation
my_sd <- function(v){
sd_1 <- my_mean(v)
sum = 0
for (i in 1:length(v)) {
temp <- (v[i]-sd_1)^2
sum <- sum + temp
}
ret_sd <- sum/(length(v)-1)
ret_sd <- sqrt(ret_sd_op)
return(ret_sd)
}
my_corr <- function(v,w){
# Get coveriance from my function.
my_cov_t <- my_cov(v,w)
my_sd_v <- my_sd(v)
my_sd_w <- my_sd(w)
ret_corr <- my_cov_t/(my_sd_v*my_sd_w)
return(ret_corr)
}
my_corr(col_a, col_b)
install.packages ("corrplot")
library(corrplot)
corrplot::cor(my_matrix)
corrplot::corrplot(cor(my_matrix))
library(ggcorplot)
library(ggcorrplot)
library(ggplot2)
library(ggcorrplot)
install.packages("ggcorrplot")
library(ggcorrplot)
ggcorplot(my_matrix, hc.order = T, type = "lower", lab = T)
#Covariance + correlation.
library(corrplot)
library(ggplot2)
library(ggcorrplot)
rnorm(6)
rnorm_100 <- rnorm(100)
hist(rnorm_100, breaks = 20)
col_a <- rnorm(6,5)
col_a <- round(col_a, 0)
col_b <- rnorm(6,5,0.5)
col_b <- round(col_b)
col_c <- rnorm(6,3)
col_d <- rnorm(6,1)
my_matrix <- round(data.frame(col_a,col_b,col_c, col_d))
mean(col_a)
my_mean(col_a)
my_cov(col_a,col_b)
cov(col_a,col_b)
my_corr(col_a, col_b)
cor(col_a,col_b)
my_corr(col_a, col_c)
my_matrix
corrplot::corrplot(cor(my_matrix))
ggcorrplot(my_matrix, hc.order=T, type="lower", lab=T)
my_corr(col_a, col_d)
my_mean <- function(v){
sum = 0
for (i in 1:length(v)){
sum = sum + v[i]
}
mm <- sum/length(v)
return(mm)
}
my_cov <- function(v,w){
m_v <- my_mean(v)
m_w <- my_mean(w)
sum = 0
for (i in 1:length(w)) {
t_v <- v[i]-m_v
t_w <- w[i]-m_w
t_p <- t_v*t_w
sum <- sum + t_p
}
ret_cov <- sum / (length(w)-1)
return(ret_cov)
}
my_sd <- function(v){
sd_1<- my_mean(v)
sum=0
for (i in 1:length(v)){
temp <- (v[i]-sd_1)^2
sum <- sum + temp
}
ret_sd_op <- sum/(length(v)-1)
ret_sd <- sqrt(ret_sd_op)
return(ret_sd)
}
my_corr <- function(v,w){
#get the covariance from my function.
my_cov_t <- my_cov(v,w)
my_sd_v <- my_sd(v)
my_sd_w <- my_sd(w)
ret_corr <- my_cov_t/(my_sd_v*my_sd_w)
return(ret_corr)
}
library(corrplot)
library(ggplot2)
library(ggcorrplot)
#Coverians + correlation (Kap 3-5)https://efif.sharepoint.com/sites/cph/Lyngby/Shared%20Documents/Forms/AllItems.aspx?id=%2Fsites%2Fcph%2FLyngby%2FShared%20Documents%2F4%2E%20Indhold%20%26%20Niveau%2FDAT%2FDAL%2Fmaterialer%5Fthor%2FDALE23%2Dopgaver%2Epdf&parent=%2Fsites%2Fcph%2FLyngby%2FShared%20Documents%2F4%2E%20Indhold%20%26%20Niveau%2FDAT%2FDAL%2Fmaterialer%5Fthor&p=true&ga=1
rnorm(6)
rnorm_100 <- rnorm(100)
hist(rnorm_100, breaks = 20)
col_a <- rnorm(6,5)
col_a <- round(col_a, 0)
col_b <- rnorm(6,5,0.5)
col_b <- round (col_b)
col_c <- rnorm(6,3)
col_d <- rnorm(6,1)
my_matrix <- round(data.frame(col_a,col_b,col_c, col_d))
mean(col_a)
my_mean(col_a)
my_cov(col_a,col_b)
my_corr(col_a, col_b)
cor(col_a, col_b)
corrplot::corrplot(cor(my_matrix))
ggcorplot(my_matrix, hc.order = T, type = "lower", lab = T)
ggcorrplot(my_matrix, hc.order = T, type = "lower", lab = T)
my_mean <- function(v){
sum = 0
for (i in 1:length(v)) {
sum = sum + v[i]
}
mm <- sum/length(v)
return(mm)
}
my_cov <- function(v,w){
m_v <- my_mean(v)
m_w <- my_mean(w)
sum = 0
for (i in 1:length(w)) {
t_v <- v[i]-m_v
t_w <- w[i]-m_w
t_p <- t_v*t_w
sum <- sum + t_p
}
ret_cov <- sum / (length(w)-1)
return(ret_cov)
}
# Correlation
my_sd <- function(v){
sd_1 <- my_mean(v)
sum = 0
for (i in 1:length(v)) {
temp <- (v[i]-sd_1)^2
sum <- sum + temp
}
ret_sd <- sum/(length(v)-1)
ret_sd <- sqrt(ret_sd_op)
return(ret_sd)
}
my_corr <- function(v,w){
# Get coveriance from my function.
my_cov_t <- my_cov(v,w)
my_sd_v <- my_sd(v)
my_sd_w <- my_sd(w)
ret_corr <- my_cov_t/(my_sd_v*my_sd_w)
return(ret_corr)
}
my_cov(col_a,col_b)
my_corr(col_a, col_b)
