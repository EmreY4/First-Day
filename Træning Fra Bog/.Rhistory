text <- c("Hello", "World")
text
typeof(text)
typeof("Hello")
# Logical(side 42) Logical vectors store TRUEs and FALSEs, R's form of Boolean data. Helpful for doing things like comparrisons
3 > 4
logic <- c(TRUE, FALSE, TRUE)
logic
typeof(logic)
typeof(F)
# Complex and Raw - Complex vectors store complex numbers. To create a complex vector, add an imaginary term to a number with i:
comp <- c(1 + 1i, 1 + 2i, 1+ 3i)
comp
typeof(comp)
# Raw vectors store raw bytes of data
raw(3)
typeof(raw(3))
# Attributes - Putting information with an associated object. Think of it as "metadata"
# NULL = No attributes for object
attributes(die)
# Names - Common attribute is to give an atomic vector names, dimensions(dim), and classes.
# Set it to NULL to remove names
names(die) <- c("one", "two", "three", "four", "five", "six")
names(die)
attributes(die)
die
names(die) <- NULL
die
# Dim - Transforming an atomic vector into an n-dimensional array with dim.
# 2x3 matrix with 2 rows and 3 columns:
dim(die) <- c(2, 3)
die
# 3x2 matrix with 3 rows and 2 columns:
dim(die) <- c(3, 2)
die
# 1x2x3 hypercube with 1 row, 2 columns and 3 "slices". - 3-dimensional structure
dim(die) <- c(1, 2, 3)
die
# Matrices - Stores values in two-dimensional array, just like a matrix from linear algebra.
# Atomic vector(reorganize into a matrix), define amount of rows by setting the nrow argument to a number.
m <- matrix(die, nrow = 2)
m
# argument: byrow = TRUE - to fill the matrix row by row
m <- matrix(die, nrow = 2, byrow = TRUE)
m
# Arrays - Creates an n-dimensional array. Sorts values into a cube of three dimensions. Not customizable.
# Provide an atomic vector as the first argument, and a vector of dimensions as the second argument, now called dim:
ar <- array(c(11:14, 21:24, 31:34), dim = c(2, 2, 3))
ar
# Exercise with every card in a royal flush
# Column by column:
hand1 <- c("ace", "king","queen", "jack", "ten", "spades", "spades", "spades", "spades", "spades")
matrix(hand1, nrow = 5)
matrix(hand1, ncol = 2)
dim(hand1) <- c(5, 2)
# Row by row:
hand2 <- c("ace", "spades", "king", "spades", "queen", "spades", "jack", "spades", "ten", "spades")
matrix(hand2, nrow = 5, byrow = TRUE)
matrix(hand2, ncol = 2, byrow = TRUE)
# Class - A class is a special case of an atomic vector
dim(die) <- c(2, 3)
typeof(die)
class(die)
attributes(die)
# Dates and Times - R uses a special class to represent dates and times. Use Sys.time () to see this.
# POSIXct is a widely used framework for representing dates and times.
# POSIXct, each time is represented by the number of seconds that have passed between the current time, and 12:00 AM January 1st 1970 (Universal Time Coordinated Zone)
Sys.time()
now <- Sys.time()
now
typeof(now)
class(now)
unclass(now)
# Which day was it a million seconds after 12:00 Jan. 1, 1970:
mil <- 1000000
mil
class(mil) <- c("POSIXct", "POSIXt")
mil
# Factors(side 50) Way of storing categorical information like ethnicity, eye color etc. Factors is something like gender, it can only have certain values (male or female)
# To make a factor = pass an atomic vector into the factor function
gender <- factor (c("male", "female", "female", "male"))
typeof(gender)
attributes(gender)
# To see exactly how R is storing my factor = use unclass()
unclass(gender)
gender
# Convert a factor to a character string with as.character
as.character(gender)
# Coercion
as.character(1)
as.logical(1)
as.numeric(FALSE)
# Lists: Groups together R objects.  Groups data into a one-dimensional set (like atomic vectors)
# List creates a list the same way c creates a vector. Separate eacj eÃ¦e,emt om the list with a comma:
list1 <- list(100:130, "R", list(TRUE, FALSE))
list1
# Lists: Double bracket: which element of the list is being displayed. Single bracket indexes: which sublement of element is being displayed.
card <- list("ace", "hearts", 1)
card
# Data Frames (tabular data) - 2 dimensional version of a list. Storage structure for data analysis (format similar to Excel spreadsheet)
# Data Frames group vectors together into a 2-dimensional table.
# Each vector becomes a column in the table. As a result, each column of a data frame can contain a different type of data; but within a column, every cell must be the same type of data.
# Give data.frame any number of vectors each separated with comma. Each vector should be set equal to a name that describes the vector. data.frame will turn each vector into a column of the new data frame:
df <- data.frame(face = c("ace", "two", "six"),
suit = c("clubs", "clubs", "clubs"), value = c(1, 2, 3))
df
# str function: Types of objects that are grouped together by list or data frame
typeof(df)
class(df)
str(df)
# To prevent R saving my character strings as factors, add argument to data.frame: stringsAsFactors = FALSE
df <- data.frame(face = c("ace", "two", "six"),
suit = c("clubs", "clubs", "clubs"), value = c(1, 2, 3),
stringsAsFactors = FALSE)
# Loading data
# Environment -> Import Dataset -> From Text (base)
# Unclicking "Strings as "factors" = Loads all of my character strings, as character strings. Clicking = converts character strings, to factors.
# Import - This saves the data into a data frame. RStudio opens a data viewer aswell.
# To check first six rows of data frame: head()
head(deck)
# To see different number of rows, give head or tails a second argument, the number of rows you would like to view. Example:
head(deck, 10)
# Saving Data
# To save any data frame in R to a .csv file, use command write.csv
# Example: Saving deck
write.csv(deck, file = "cards.csv", row.names = FALSE)
# Working directory: To see where my working directory is, run: getwd()
getwd()
# CHAPTER 4 - R NOTATION
# Dealing cards - To deal a card from the topp of my deck, i need a function that selects the first row of values in my data frame:
deal(deck)
# Selecting Values - Write the data frame's name followed bt a pair of hard brackets, to extract or set of values from a data frame:
# The indexes tell R which values to return. R uses first index to subset the rows of the data frame, and second index to subset the columns
deck [ , ]
# 6 different ways to write an index for R. Each does something slightly different (Positive integers, Negative integers, Zero, Logical values, Names) Most simple one to use: Positive integers
# Positive integers
head(deck)
deck [1, 1]
# To extract more than 1 value, use a vector of positive integers. Example: return the first row of deck with deck [1, c(1, 2, 3)] or [1, 1:3]:
# R returns the values of deck that ar both in the first row and the first, second and third columns.
deck[1, c(1, 2, 3)]
# To save this new set to an R object with R's assignment operator:
new <- deck[1, c(1, 2, 3)]
new
# Can use same syntax to select values in any R object, as long as i supply one index for each dimension of the object. Example, i can subset a vector with a single index:
vec <- c(6, 1, 3, 6, 10, 5)
vec[1:3]
# Negative Integers - R will return every element EXCEPT the elements in a negative index. More efficiant way to subset than positive integers if i want to inclute the majority of a data frame's rows or columns.
deck[-(2:52), 1:3]
# Zero - Not very helpfull
deck[0, 0]
# Blank Spaces - Use to tell R to extract every value in a dimension. This lets you subset an object on one dimension but not the others, which is useful for extracting entire rows or columnds from a data frame:
deck[1, ]
# Logical Values - Vector must be as long as the dimension you are trying to subset
# Supplying a vector of TRUEs and FALSEs as your index, will make R match each TRUE and FALSE to a row in your data frame.
deck [1, c(TRUE, TRUE, FALSE)]
rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F)
deck[rows, ]
# Names - If my object has names, i can ask for the elements. Common way to extract the columns of a data frame, since columnds almost always have names:
deck[1, c("face", "suit", "value")]
# Names - Entire value column
deck[ , "value"]
# Deal a card
# Following code makes a function that returns the first row of a data frame:
deal <- function(cards) {
cards[1, ]
}
deal(deck)
# Shuffle the deck - To shuffle the deck, you need to randomly reorder the rows in the data frame
# Start by extracting every row in your data frame:
deck2 <- deck[1:52, ]
head(deck2)
# Asking for rpw 2, then row 1, and then the rest of the cards:
deck3 <- deck[c(2, 1, 3:52), ]
head(deck3)
# Use sample function to get the rows in random orders. You need to sort the integers from 1 to 52 into a random order and use the results as a row index:
random <- sample(1:52, size = 52)
random
deck4 <- deck[random, ]
head(deck4)
# Shuffle function looks like:
shuffle <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
# Now i can shuffle my cards between each deal:
deal(deck)
deck2 <- shuffle(deck)
deal(deck2)
# Dollar Signs and Double Brackets
# R will return all of the values in the column as a vector.
# To select a column from a data frame, write the data frame's name and the column name separated by a $. Notice that no quotes should go around the column name:
deck$value
# Time to time you will want to run a function like mean or median on the values in a variable. In R, these functions expect a vector of values as input, and deck$value delivers your data in just the right format:
mean(deck$value)
median(deck$value)
# The same $ notation can be used the elements of lists, if they have names. Make a list to see this:
lst <- list(numbers = c(1, 2), logical = TRUE, strings = c("a", "b", "c"))
lst
# And subset it:
lst[1]
# Use single brackets to select train cars(metaphor), double brackets to select the contents inside of a car(metaphor):
lst["numbers"]
lst[["numbers"]]
#CHAPTER 5 - MODIFYING VALUES
# Each of the following games will teach you something different about manipulating.
# Task: Change the point system of your deck 3 times to match 3 different games: war, hearts and blackjack. Start by making a copy of your deck to ensure that you have a copy of a deck to fall back on.
deck2 <- deck
# Changing Values in Place: R's notation system can be used to modify values within an R object. First, describe the value or values you wish to modify. Then use the assignment operator <- to overwrite those values. R will update the selected values in the original object:
vec <- c(0, 0, 0, 0, 0, 0)
vec
# Here's how you can select the first value of vec:
vec[1]
# Here's how you can modify it:
vec[1] <- 1000
vec
# You can replace multiple values at once as long as the number of new values equals tje number of selected values:
vec[c(1, 3, 5)] <- c(1, 1, 1)
vec
vec[4:6] <- vec[4:6] + 1
vec
# You can also create values that do not yet exist in your object. R will expand the object to accommodate the new values:
vec[7] <- 0
vec
# This provides a great wat to add new variables to your data set:
deck2$new <- 1:52
head(deck2)
# You can also remove columns from a data frame(and elements from a list) by assigning them the symbol NULL:
deck2$new <- NULL
head(deck2)
# As long as you haven't shuffled your deck, you know just where the aces are. They appear every 13 cards. Hence, you can describe them with R's notation system:
deck2[c(13, 26, 39, 52), ]
# You can single out just the values of the aces by subsetting the columns dimension of deck2. Or, even betterm you can subset the column vector deck2$value:
deck2[c(13, 26, 39, 52), 3]
deck2$value[c(13, 26, 39, 52)]
# All i did was to assign a new set of values to these old values. The set of new values will have to be the same size as the set of values that you are replacing:
deck2$value[c(13, 26, 39, 52)] <- c(14, 14, 14, 14)
# Or:
deck2$value[c(13, 26, 39, 52)] <- 14
# The new values will appear inside deck2:
head(deck2, 13)
# The same technique will work whether you store your data in a vector, matrix, array, list or data frame. Just describe the values that you want to change with R's notation system, then assign over those values with R's assignment operator.
# What if the decks had been shuffled(tedious):
deck3 <- shuffle(deck)
# Where are the aces now? :)
head(deck3)
#Logical Subsetting(side 80)
# Selecting values with a vector of TRUEs and FALSEs. R will return every element that matches a TRUE:
vec
vec [c(F, F, F, F, T, F, F)]
# Logical Tests - Is like a comparison like "is 1 less than 2?", or "is 3 greater than 4".
# > Greater?, < Less?, >= Greater or equal?, <= Less or equal?, == Equal to?, != Not equal to?, %in% Is a in the group c(a, b, c)?
# Each operator returns a TRUE or a FALSE:
1 > 2
1 > c(0, 1, 2)
c(1, 2, 3) == c(3, 2, 1)
# %in% tests independently whether each value on the left is somewhere in the vector on the right:
1 %in% c(3, 4, 5)
c(1, 2) %in% c(3, 4, 5)
c(1, 2, 3, 4) %in% c(3, 4, 5)
# == Tests for equality. = assigns a value to an object like <-. DONT USE =
deck2$face
deck2$face == "ace"
# To sum the numbers of TRUES, use sum:
sum(deck2$face == "ace")
# Spot and change the aces in your deck. Build a logical test that identifies the aces, then single out the ace point values, then change the ace values by using assignment:
deck3$face == "ace"
deck3$value[deck3$face == "ace"]
deck3$value[deck3$face == "ace"] <- 14
head(deck3)
# To summarize, i can use a logical test to select values within an object.
# Logical subsetting is a powerful technique because it lets you quickly identify, extract and modify individual values in your data set.
# Logical subsetting: New game: hearts. In hearts, every card has a value of zero, except cards in the suit of hearts and queen of spades. Suit of hearts: value of 1
deck4 <- deck
deck4$value <- 0
head(deck4, 13)
# Identify cards with the hearts suit:
deck4$suit == "hearts"
# Use test to select the values of these cards:
deck4$value[deck4$suit == "hearts"]
# Assign a new number to these values:
deck4$value[deck4$suit == "hearts"] <- 1
# Now all of my hearts cards have been updated:
deck4$value[deck4$suit == "hearts"]
# Boolean Operators(side 85): Combine multiple logical tests together into a single test. 6 boolean operators( &, |, xor, !, any, all)
# To use a Boolean Operator, place it between 2 complete logical tests. R will execute each logical test and use the Boolean operator to combine the results into a single TRUE or FALSE. is x greater than 2 and is x less than 9: x > 2 & x < 9
# Boolean operators will follow the same element-wise execution as arithmetic and logical operators, when using it with vectors:
a <- c(1, 2, 3)
b <- c(1, 2, 3)
c <- c(1, 2, 4)
a == b
b == c
a == b & b == c
# Use Boolean operator to locate the queen of spades in your deck:
deck4$face == "queen" & deck4$suit == "spades"
# Save the results of this to its own object to make it easier to work with:
queenOfSpades <- deck4$face == "queen" & deck4$suit == "spades"
# Use tje test as an index to select the value of the queen of spades:
deck4[queenOfSpades, ]
deck4$value[queenOfSpades]
# Now that i have found the queen of spades, i can update her value:
deck4$value[queenOfSpades] <- 13
deck4[queenOfSpades, ]
# Missing Information(side89)
# You don't know a value because the measurements was lost, corrupted, or never taken to begin with. R has a way to help you manage these missing values
#  The NA character is a special symbol in R and stands for "NOT AVAILABLE". Example shows that i don't have enough information to determine the result:
1 + NA
NA == 1
# na.rm: Removes/ignores any NA's when you add the function: na.rm = TRUE:
# bad:
c(NA, 1:50)
mean(c(NA, 1:50))
# good:
mean(c(NA, 1:50), na.rm = TRUE)
# is.na is a function that can test whether a value is NA. Use is.na():
is.na(NA)
vec <- c(1, 2, 3, NA)
is.na(vec)
# CHAPTER 7 - PROGRAMS
# Building a slot machine - First step is to randomly generate 3 symbols. Second step is to calculate a prize based of those symbols
# Randomly generate 3 symbols with the sample function:
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE, prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
# Now you can use get_symbols () to generate symbols in my sloth machine:
get_symbols()
get_symbols()
get_symbols()
# To create you play function, you will need to write a program that can take the output of get_symbols and calculate the correct prize based on table 7-1(side 119).
# In R, programs are saved either as functions or R scripts. I will save mine as a function named score:
play <- function() {
# step 1: generate symbols:
symbols <- get_symbols()
# step 2: display the symbols
print(symbols)
# step 3: score the symbols
score(symbols)
}
print(symbols)
# if Statements: Linking cases together in a parallel requires a bit of structure: You can help the program navigate with an if statement
# In english we say "If this is true, do that". In R, we would say: if (this) {that}:
num <- -2
if (num < 0) {
num <- num * -1
}
num
# CHAPTER 9 LOOPS (side 163-172)
# Use expand.grid to make a data frame that contains every possible combination of 3 symbols from the wheel vector:
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
# Create a data frame of each combination of 3 symbols: Run expand.grid and give it 3 copies of wheel: Result should be a data frame with 343 rows, one for each unique combination of 3 slot symbols:
combos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)
combos
# Calculate the probability of getting each combination:
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE, prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
# Your names should match the input that you want to look up. In this case, the input will be the character strings that appear in Var1, Var2 and Var3:
prob <- c("DD" = 0.03, "7" = 0.03, "BBB" = 0.06, "BB" = 0.1, "B" = 0.25, "C" = 0.01, "0" = 0.52)
# Now lets look up our probabilities:
combos$prob1 <- prob[combos$Var1]
combos$prob2 <- prob[combos$Var2]
combos$prob3 <- prob[combos$Var3]
head(combos, 3)
# You can calculate the probabilities of every possible combination in one fell swoop with some element-wise execution:
combos$prob <- combos$prob1 * combos$prob2 * combos$prob3
head(combos, 3)
# The sum of the probabilities is one, which suggests that our math is correct:
sum(combos$prob)
# To calculate the expected value, i must determine the prize for EACH combination in combos:
# First row of combos can calculate the prize like this:
symbols <- c(combos[1, 1], combos[1, 2], combos[1, 3])
score(symbols)
# for loops: Repeats a chunk of code many times, once for each element in a set of input. for loops provides a way to tell R, "Do this for every value of that."
for (value in c("my", "first", "for", "loop")) {
print("one run")
}
# or
for (value in c("my", "second", "for", "loop")) {
print(value)
}
# If you look at value, it will contain the value of the last element in the set:
value
# You can also do it like this - for loops help you connect a piece of code with each element in a set.
for (word in c("my", "second", "for", "loop")) {
print(word)
}
for (string in c("my", "second", "for", "loop")) {
print(string)
}
for (i in c("my", "second", "for", "loop")) {
print(i)
}
# Removing the print: wont return anything if print is removed:
for (value in c("my", "third", "for", "loop")) {
value
}
# To save output from a for loop, you must write the loop so that it saves its own output as it runs. This can be done by creating an empty vector or list before you run the for loop. Then use the for loop to fill up the vector or list. When the for loop is finished, you will be able to access the vector or list, which will now have all of your results:
# Following code creates an empty vector of length 4:
chars <- vector(length = 4)
# The next loop will fill it with strings:
words <- c("my", "fourth", "for", "loop")
for (i in 1:4) {
chars[i] <- words[i]
}
chars
# Using for loop to calculate the prize of each row in combos. To begin, create a new column in combos to store the results of the for loop:
combos$prize <- NA
head(combos, 3)
#MANGLER SCORE!!!!!!!!!!!!! NOGET GALT
# You can score the rows in combos with:
for( i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prize[i] <- score(symbols)
}
# After you run the for loop, combo$prize will contain the correct prize for each row. This exercise also tests the score function; score appears to work correctly for every possible slot combination:
head(combos, 3)
# To calculate the expected value of the prize: sum combo$prize weighed by combo$prob. This is also the payout of the slot machine.
sum(combos$prize * combos$prob)
# (Side 169)
# Here is a version of score that handles wild diamonds:
score <- function(symbols) {
diamonds <- sum(symbols == "DD")
cherries <- sum(symbols == "C")
# identify case
# since diamonds are wild, only non diamonds
# matter of the three of a kind and all bars
slots <- symbols[symbols != "DD"]
same <- length(unique(slots)) == 1
bars <- slots %in% c("B", "BB", "BBB")
# assign prize
if (diamonds == 3) {
prize <- 100
} else if (same) {
payouts <- c("7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[slots[1]])
} else if (all(bars)) {
prize <- 5
} else if (cherries > 0) {
# diamonds count as cherries
# so long as there is one real cherry
prize <- c(0, 2, 5)[cherries + diamonds + 1]
} else {
prize <- 0
}
# double for each diamond
prize * 2^diamonds
}
# To update the expected value, just update combos$prize:
for (i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prize[i] <- score(symbols)
}
# Then recompute the expected value:
sum(combos$prize * combos$prob)
# While Loops FEJL!!!!!!!!
# R has 2 companions to the loop: the while loop and the repeat loop
# A while loop returns a chunk while a certain condition remains TRUE
# To create a while loop, follow while by a condition and chunk of code like this:
while (condition) {
code
}
# While loops can be used to do things that take avaring bumber of iterations, like calculating how long it takes to go broke playing slots. However, in practice, while loops are much less common than for loops in R:
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
while (cash > 0) {
cash <- cash - 1 + play()
n <- n + 1
}
n
}
plays_till_broke(100)
# Repeat loops(side 171)
# repeat loops are even more basic than while loops. They will repeat a chunk of code until you tell them to stop (by hitting escape), or until they encounter the command break, which will stop the loop.
# repeat loop can be used to recreate plays_till_broke, my function that simulates how long it takes to lose money while playing slots:
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
repeat {
cash <- cash - 1 + play()
n <- n + 1
if (cash <= 0) {
break
}
}
n
}
plays_till_broke(100)
load("~/Documents/Dataanalyse/TrÃ¦ning Fra Bog/TrÃ¦ning Fra Bog.RData")
# Identify cards with the hearts suit:
deck4$suit == "hearts"
# Use test to select the values of these cards:
deck4$value[deck4$suit == "hearts"]
# Assign a new number to these values:
deck4$value[deck4$suit == "hearts"] <- 1
# Inner multiplication with %*% (traditional matrix multiplication)
die %*% die
# Outer multiplication with %o% (traditional matrix multiplication)
die %o% die
# Replace = true (causes sample to sample with replacement)
replace = TRUE
# Method to simulate a pair of dice
sample(die, size = 2, replace = TRUE)
# Method to add up the dice with sum function
dice <- sample(die, size = 2, replace = TRUE)
load("~/Documents/Dataanalyse/TrÃ¦ning Fra Bog/TrÃ¦ning Fra Bog.RData")
load("~/Documents/Dataanalyse/TrÃ¦ning Fra Bog/TrÃ¦ning Fra Bog.RData")
# Shuffle the deck - To shuffle the deck, you need to randomly reorder the rows in the data frame
# Start by extracting every row in your data frame:
deck2 <- deck[1:52, ]
